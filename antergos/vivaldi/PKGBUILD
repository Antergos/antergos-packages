# Maintainer: Antergos Developers <dev@antergos.com>
# Contributor: BlackIkeEagle <ike DOT devolder AT gmail DOT com>
# Contributor: TZ86
# Contributor: killajoe

_archgit_url='https://git.archlinux.org/svntogit/packages.git/plain/trunk'

_from_arch_pkg() {
	echo "${1}::${_archgit_url}/${1}?h=packages/chromium"
}

pkgname=vivaldi
pkgver=2.1.1337.36
# https://update.vivaldi.com/update/1.0/relnotes/2.1.1337.36.html
_chromium=70.0.3538.77 # https://omahaproxy.appspot.com
pkgrel=1
pkgdesc='An advanced browser made with the power user in mind.'
groups=('browser')
url="https://vivaldi.com"
options=('!strip' '!zipman')
license=('custom' 'LGPL2.1')
arch=('x86_64')
depends=('gtk3' 'nss' 'libxtst' 'gconf' 'libxss' 'freetype2' 'ttf-font' 'nspr'
		'desktop-file-utils' 'shared-mime-info' 'alsa-lib' 'hicolor-icon-theme')
makedepends=(
	'w3m' 'libexif' 'libpulse' 'libxss' 'ninja' 'pciutils' 'python2' 'xdg-utils' 'nodejs'
	'opus' 'gperf' 'yasm' 'mesa' 'harfbuzz-icu' 'libwebp' 'libxslt' 'libxml2' 're2' 'minizip'
	'snappy' 'clang' 'lld'
)
provides=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
conflicts=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
replaces=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
noextract=('chrome.rpm')

source=(
	"https://downloads.vivaldi.com/stable/vivaldi-stable-${pkgver}-1.x86_64.rpm"
	"https://commondatastorage.googleapis.com/chromium-browser-official/chromium-$_chromium.tar.xz"
	"chrome.rpm::https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
	'chrome-eula_text.html::https://www.google.com/intl/en/chrome/browser/privacy/eula_text.html'
	"$(_from_arch_pkg include-stdint.h-in-pdfium_mem_buffer_file_write.h.patch)"
	"$(_from_arch_pkg     chromium-harfbuzz-r0.patch)"
	"$(_from_arch_pkg  chromium-widevine-r2.patch)"
	"$(_from_arch_pkg chromium-system-icu.patch)"
	"$(_from_arch_pkg chromium-skia-harmony.patch)"

)
md5sums=('3839ee739791023c227d88ec2be54b32'
         'a246a9c95308d8918db963731e553e70'
         '9cb1cfda43025a85d4826d7358ed0284'
         '253fd2d60c6a9348a13f06a819a14906'
         '6a9fd8e67d1cc37be22e79662668128a'
         '2c394971c9d86d3184b6e50f1195b794'
         '56ebefbdfafb2d7ede199a4257d514d4'
         'caff61182595798a5c00913cb5ed9355'
         '254061cb349cff714230b7cca83b0a4c')


# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  [icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  #[libpng]=libpng            # https://crbug.com/752403#c10
  #[libvpx]=libvpx            # needs unreleased libvpx
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [yasm]=
  [zlib]=minizip
)
_unwanted_bundled_libs=(
  ${!_system_libs[@]}
  ${_system_libs[libjpeg]+libjpeg_turbo}
)
depends+=(${_system_libs[@]})

# Google API keys (see https://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys.
_google_api_key=AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM
_google_default_client_id=413772536636.apps.googleusercontent.com
_google_default_client_secret=0ZChLK6AxeA3Isu96MkwqDR4

prepare() {
	cd "$srcdir/chromium-$_chromium"

  # Allow building against system libraries in official builds
  sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py

  # https://crbug.com/893950
  sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
    third_party/blink/renderer/core/xml/*.cc \
    third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
    third_party/libxml/chromium/libxml_utils.cc

  # https://crbug.com/879900
  patch -Np1 -i ../include-stdint.h-in-pdfium_mem_buffer_file_write.h.patch

  # https://crbug.com/skia/6663#c10
  patch -Np4 -i ../chromium-skia-harmony.patch

  # Fixes from Gentoo
  patch -Np1 -i ../chromium-harfbuzz-r0.patch
  patch -Np1 -i ../chromium-widevine-r2.patch

  # https://bugs.gentoo.org/661880#c21
  patch -Np1 -i ../chromium-system-icu.patch

  # Force script incompatible with Python 3 to use /usr/bin/python2
  sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${_unwanted_bundled_libs[@]}; do
    find "third_party/$_lib" -type f \
      \! -path "third_party/$_lib/chromium/*" \
      \! -path "third_party/$_lib/google/*" \
      \! -path 'third_party/yasm/run_yasm.py' \
      \! -regex '.*\.\(gn\|gni\|isolate\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"
}

build() {
	cd "$srcdir/chromium-$_chromium"

	export PATH="$srcdir/python2-path:$PATH"
	export HOME="$srcdir"
	export TMPDIR="$srcdir/temp"
	mkdir -p "$TMPDIR"

	export CC=clang
	export CXX=clang++
	export AR=ar
	export NM=nm

	local args=(
		'clang_use_chrome_plugins=false'
		'fieldtrial_testing_like_official_build=true'
		'remove_webcore_debug_symbols=true'
		'ffmpeg_branding="Chrome"'
		'proprietary_codecs=true'
		'enable_hevc_demuxing=true'
		'link_pulseaudio=true'
		'use_gconf=false'
		'use_gio=false'
		'use_gnome_keyring=false'
		'use_kerberos=false'
		'use_cups=false'
		'use_sysroot=false'
		'use_gold=false'
		'linux_use_bundled_binutils=false'
		'use_gtk3=true'
		'use_custom_libcxx=false'
		'fatal_linker_warnings=false'
		'treat_warnings_as_errors=false'
		'is_clang=true'
		'custom_toolchain="//build/toolchain/linux/unbundle:default"'
		'host_toolchain="//build/toolchain/linux/unbundle:default"'
		'is_component_build=true'
		'is_debug=false'
		'symbol_level=0'
		'enable_nacl=false'
		'enable_swiftshader=false'
		'enable_nacl=false'
		'enable_widevine=true'
		'use_system_freetype=true'
		'use_system_harfbuzz=true'
	)

	python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${args[*]}"
	out/Release/gn gen out/Release --args="${args[*]}" --script-executable=/usr/bin/python2

	ninja -C out/Release -v media/ffmpeg
}


package() {
	cp -a {opt,usr} "${pkgdir}"

	# File conflicts with exo package
	rm "${pkgdir}/usr/share/xfce4/helpers/vivaldi.desktop"

	# suid sanbox
	chmod 4755 "${pkgdir}/opt/vivaldi/vivaldi-sandbox"

	# make /usr/bin/vivaldi available if its not there
	if [[ ! -e "$pkgdir/usr/bin/vivaldi-stable" ]]; then
		install -dm 755 "$pkgdir/usr/bin"
		ln -sf /opt/vivaldi/vivaldi "$pkgdir/usr/bin/vivaldi-stable"
	fi

	# install icons
	for res in 16 22 24 32 48 64 128 256; do
		install -Dm644 "${pkgdir}/opt/vivaldi/product_logo_${res}.png" \
		"${pkgdir}/usr/share/icons/hicolor/${res}x${res}/apps/vivaldi.png"
	done

	# license
	install -dm755 "$pkgdir/usr/share/licenses/$pkgname"
	strings "$pkgdir/opt/vivaldi/locales/en-US.pak" \
		| tr '\n' ' ' \
		| sed -rne 's/.*(<html lang.*>.*html>).*/\1/p' \
		| w3m -I 'utf-8' -T 'text/html' \
		> "$pkgdir/usr/share/licenses/$pkgname/eula.txt"

	# Install ffmpeg codec
	(cd "$srcdir/chromium-$_chromium" \
		&& install -Dm644 out/Release/libffmpeg.so "$pkgdir/opt/vivaldi/libffmpeg.so")

	# Extract and install widevine codec
	mkdir "${srcdir}/chrome" && cd "${srcdir}/chrome"
	bsdtar -xf ../chrome.rpm opt/google/chrome/libwidevinecdm.so

	# Copy to Vivaldi directory for now. We might add a symlink when package is installed (using alpm hook).
	unlink "${pkgdir}/opt/vivaldi/libwidevinecdm.so" || true
	cp opt/google/chrome/libwidevinecdm.so "${pkgdir}/opt/vivaldi"
	
	# Chrome license
	cp "${srcdir}/chrome-eula_text.html" "${pkgdir}/usr/share/licenses/${pkgname}"

	# ALPM Hooks
	mkdir -p "${pkgdir}/usr/share/libalpm"/{hooks,scripts}
	(cd "${srcdir}" \
		&& cp ../*.hook "${pkgdir}/usr/share/libalpm/hooks" \
		&& install -Dm755 ../vivaldi-widevine-helper "${pkgdir}/usr/share/libalpm/scripts/vivaldi-widevine-helper")
}
